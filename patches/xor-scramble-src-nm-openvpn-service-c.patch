diff --git a/src/nm-openvpn-service.c b/src/nm-openvpn-service.c
index af57227..f299242 100644
--- a/src/nm-openvpn-service.c
+++ b/src/nm-openvpn-service.c
@@ -426,7 +426,7 @@ validate_one_property (const char *key, const char *value, gpointer user_data)
 			g_set_error (info->error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("invalid address “%s”"),
+			             _("invalid address  %s"),
 			             key);
 			break;
 		case G_TYPE_INT:
@@ -438,7 +438,7 @@ validate_one_property (const char *key, const char *value, gpointer user_data)
 			g_set_error (info->error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("invalid integer property “%s” or out of range [%d -> %d]"),
+			             _("invalid integer property '%s' or out of range [%d -> %d]"),
 			             key, prop->int_min, prop->int_max);
 			break;
 		case G_TYPE_BOOLEAN:
@@ -449,14 +449,14 @@ validate_one_property (const char *key, const char *value, gpointer user_data)
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
 			             /* Translators: keep "yes" and "no" untranslated! */
-			             _("invalid boolean property “%s” (not yes or no)"),
+			             _("invalid boolean property '%s' (not yes or no)"),
 			             key);
 			break;
 		default:
 			g_set_error (info->error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("unhandled property “%s” type %s"),
+			             _("unhandled property '%s' type %s"),
 			             key, g_type_name (prop->type));
 			break;
 		}
@@ -467,7 +467,7 @@ validate_one_property (const char *key, const char *value, gpointer user_data)
 		g_set_error (info->error,
 		             NM_VPN_PLUGIN_ERROR,
 		             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-		             _("property “%s” invalid or not supported"),
+		             _("property '%s' invalid or not supported"),
 		             key);
 	}
 }
@@ -1430,7 +1430,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 					g_set_error (error,
 					             NM_VPN_PLUGIN_ERROR,
 					             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-					             _("Invalid port number “%s”."),
+					             _("Invalid port number  %s"),
 					             defport);
 					return FALSE;
 				}
@@ -1450,7 +1450,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 					g_set_error (error,
 					             NM_VPN_PLUGIN_ERROR,
 					             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-					             _("Invalid proto “%s”."), proto);
+					             _("Invalid proto  %s"), proto);
 					return FALSE;
 				}
 			} else if (nm_streq0 (proto_tcp, "yes"))
@@ -1499,7 +1499,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			              _("Invalid proxy type “%s”."),
+			              _("Invalid proxy type  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1584,7 +1584,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid ping duration “%s”."),
+			             _("Invalid ping duration  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1597,7 +1597,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid ping-exit duration “%s”."),
+			             _("Invalid ping-exit duration  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1610,7 +1610,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid ping-restart duration “%s”."),
+			             _("Invalid ping-restart duration  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1623,7 +1623,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid connect timeout “%s”."),
+			             _("Invalid connect timeout  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1648,12 +1648,32 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid max-routes argument “%s”."),
+			             _("Invalid max-routes argument  %s"),
 			             tmp);
 			return FALSE;
 		}
 	}
 
+	// After handling max routes, before device/dev-type:
+	tmp = nm_setting_vpn_get_data_item(s_vpn, NM_OPENVPN_KEY_SCRAMBLE_ENABLE);
+	if (nm_streq0(tmp, "yes")) {
+		const char *scramble_type = nm_setting_vpn_get_data_item(s_vpn, NM_OPENVPN_KEY_SCRAMBLE_TYPE);
+		const char *scramble_key = nm_setting_vpn_get_data_item(s_vpn, NM_OPENVPN_KEY_SCRAMBLE_KEY);
+		if (nmovpn_arg_is_set(scramble_type) && nmovpn_arg_is_set(scramble_key)) {
+			args_add_strv(args, "--scramble", scramble_type, scramble_key);
+		}
+	} else {
+		/* Environment variable backup for scramble */
+		const char *scramble_env = getenv("NM_OPENVPN_SCRAMBLE");
+		if (scramble_env && nm_streq0(scramble_env, "yes")) {
+			const char *scramble_type_env = getenv("NM_OPENVPN_SCRAMBLE_TYPE");
+			const char *scramble_key_env = getenv("NM_OPENVPN_SCRAMBLE_KEY");
+			if (scramble_type_env && scramble_key_env) {
+				args_add_strv(args, "--scramble", scramble_type_env, scramble_key_env);
+			}
+		}
+	}
+
 	/* Device and device type, defaults to tun */
 	tmp = nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_DEV);
 	tmp2 = nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_DEV_TYPE);
@@ -1692,7 +1712,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid keysize “%s”."),
+			             _("Invalid keysize  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1797,7 +1817,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid reneg seconds “%s”."),
+			             _("Invalid reneg seconds  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1827,7 +1847,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid TUN MTU size “%s”."),
+			             _("Invalid TUN MTU size  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1840,7 +1860,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid fragment size “%s”."),
+			             _("Invalid fragment size  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1950,7 +1970,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 		g_set_error (error,
 		             NM_VPN_PLUGIN_ERROR,
 		             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-		             _("Unknown connection type “%s”."),
+		             _("Unknown connection type  %s"),
 		             connection_type);
 		return FALSE;
 	}
@@ -1968,7 +1988,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("User “%s” not found, check NM_OPENVPN_USER."),
+			             _("User '%s' not found, check NM_OPENVPN_USER."),
 			             nm_openvpn_user);
 			return FALSE;
 		}
@@ -1980,7 +2000,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Group “%s” not found, check NM_OPENVPN_GROUP."),
+			             _("Group '%s' not found, check NM_OPENVPN_GROUP."),
 			             nm_openvpn_group);
 			return FALSE;
 		}
@@ -2337,7 +2357,7 @@ main (int argc, char *argv[])
 	gulong handler_id_plugin = 0;
 
 	GOptionEntry options[] = {
-		{ "persist", 0, 0, G_OPTION_ARG_NONE, &persist, N_("Don’t quit when VPN connection terminates"), NULL },
+		{ "persist", 0, 0, G_OPTION_ARG_NONE, &persist, N_("Don't quit when VPN connection terminates"), NULL },
 		{ "debug", 0, 0, G_OPTION_ARG_NONE, &gl.debug, N_("Enable verbose debug logging (may expose passwords)"), NULL },
 		{ "bus-name", 0, 0, G_OPTION_ARG_STRING, &bus_name, N_("D-Bus name to use for this instance"), NULL },
 		{NULL}
