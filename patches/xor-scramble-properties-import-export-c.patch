diff --git a/properties/import-export.c b/properties/import-export.c
index 51049de..33b39af 100644
--- a/properties/import-export.c
+++ b/properties/import-export.c
@@ -216,9 +216,9 @@ args_params_check_arg_nonempty (const char **params,
 
 	if (params[n_param][0] == '\0') {
 		if (argument_name)
-			*out_error = g_strdup_printf (_("argument %s of “%s” can not be empty"), argument_name, params[0]);
+			*out_error = g_strdup_printf (_("argument %s of '%s' can not be empty"), argument_name, params[0]);
 		else
-			*out_error = g_strdup_printf (_("argument of “%s” can not be empty"), params[0]);
+			*out_error = g_strdup_printf (_("argument of '%s' can not be empty"), params[0]);
 		return FALSE;
 	}
 	return TRUE;
@@ -234,9 +234,9 @@ args_params_check_arg_utf8 (const char **params,
 		return FALSE;
 	if (!_is_utf8 (params[n_param])) {
 		if (argument_name)
-			*out_error = g_strdup_printf (_("argument %s of “%s” must be UTF-8 encoded"), argument_name, params[0]);
+			*out_error = g_strdup_printf (_("argument %s of '%s' must be UTF-8 encoded"), argument_name, params[0]);
 		else
-			*out_error = g_strdup_printf (_("argument of “%s” must be UTF-8 encoded"), params[0]);
+			*out_error = g_strdup_printf (_("argument of '%s' must be UTF-8 encoded"), params[0]);
 		return FALSE;
 	}
 	return TRUE;
@@ -260,7 +260,7 @@ args_params_parse_int64 (const char **params,
 
 	v = _nm_utils_ascii_str_to_int64 (params[n_param], 10, min, max, -1);
 	if (errno) {
-		*out_error = g_strdup_printf (_("invalid %uth argument to “%s” where number expected"),
+		*out_error = g_strdup_printf (_("invalid %uth argument to '%s' where number expected"),
 		                              n_param,
 		                              params[0]);
 		return FALSE;
@@ -301,7 +301,7 @@ args_params_parse_ip4 (const char **params,
 	    && NM_IN_STRSET (params[n_param], "vpn_gateway", "net_gateway", "remote_host")) {
 		/* we don't support these special destinations, as they currently cannot be expressed
 		 * in a connection. */
-		*out_error = g_strdup_printf (_("unsupported %uth argument %s to “%s”"),
+		*out_error = g_strdup_printf (_("unsupported %uth argument %s to '%s'"),
 		                              n_param,
 		                              params[n_param],
 		                              params[0]);
@@ -319,14 +319,14 @@ args_params_parse_ip4 (const char **params,
 			goto not_dns;
 		}
 		/* we also don't support specifing a FQDN. */
-		*out_error = g_strdup_printf (_("unsupported %uth argument to “%s” which looks like a FQDN but only IPv4 address supported"),
+		*out_error = g_strdup_printf (_("unsupported %uth argument to '%s' which looks like a FQDN but only IPv4 address supported"),
 		                              n_param,
 		                              params[0]);
 		return FALSE;
 	}
 
 not_dns:
-	*out_error = g_strdup_printf (_("invalid %uth argument to “%s” where IPv4 address expected"),
+	*out_error = g_strdup_printf (_("invalid %uth argument to '%s' where IPv4 address expected"),
 	                              n_param,
 	                              params[0]);
 	return FALSE;
@@ -351,7 +351,7 @@ args_params_parse_key_direction (const char **params,
 	else if (nm_streq (params[n_param], "1"))
 		*out_key_direction = "1";
 	else {
-		*out_error = g_strdup_printf (_("invalid %uth key-direction argument to “%s”"), n_param, params[0]);
+		*out_error = g_strdup_printf (_("invalid %uth key-direction argument to '%s'"), n_param, params[0]);
 		return FALSE;
 	}
 	return TRUE;
@@ -365,7 +365,7 @@ args_params_error_message_invalid_arg (const char **params, guint n_param)
 	g_return_val_if_fail (n_param > 0, FALSE);
 	g_return_val_if_fail (n_param < g_strv_length ((char **) params), FALSE);
 
-	return g_strdup_printf (_("invalid %uth argument to “%s”"), n_param, params[0]);
+	return g_strdup_printf (_("invalid %uth argument to '%s'"), n_param, params[0]);
 }
 
 /*****************************************************************************/
@@ -715,7 +715,7 @@ inline_blob_mkdir_parents (const InlineBlobData *data, const char *filepath, cha
 		return TRUE;
 
 	if (g_file_test (dirname, G_FILE_TEST_EXISTS)) {
-		*out_error = g_strdup_printf (_("“%s” is not a directory"), dirname);
+		*out_error = g_strdup_printf (_("'%s' is not a directory"), dirname);
 		return FALSE;
 	}
 
@@ -723,7 +723,7 @@ inline_blob_mkdir_parents (const InlineBlobData *data, const char *filepath, cha
 		return FALSE;
 
 	if (mkdir (dirname, 0755) < 0) {
-		*out_error = g_strdup_printf (_("cannot create “%s” directory"), dirname);
+		*out_error = g_strdup_printf (_("cannot create '%s' directory"), dirname);
 		return FALSE;
 	}
 
@@ -760,7 +760,7 @@ inline_blob_write_out (const InlineBlobData *data, GError **error)
 		g_set_error (error,
 		             NMV_EDITOR_PLUGIN_ERROR,
 		             NMV_EDITOR_PLUGIN_ERROR_FAILED,
-		             _("cannot write <%s> blob from line %ld to file “%s”"),
+		             _("cannot write <%s> blob from line %ld to file '%s'"),
 		             data->token,
 		             (long) data->token_start_line,
 		             data->path);
@@ -904,7 +904,7 @@ do_import (const char *path, const char *contents, gsize contents_len, GError **
 			 * we'll handle it here anyway.
 			 */
 			if (!NM_IN_STRSET (params[1], NMOVPN_PROTCOL_TYPES)) {
-				line_error = g_strdup_printf (_("proto expects protocol type like “udp” or “tcp”"));
+				line_error = g_strdup_printf (_("proto expects protocol type like 'udp' or 'tcp'"));
 				goto handle_line_error;
 			}
 			if (!NM_IN_STRSET (params[1], "udp", "udp4", "udp6")) {
@@ -1141,7 +1141,7 @@ do_import (const char *path, const char *contents, gsize contents_len, GError **
 
 				if (params[3]) {
 					if (!NM_IN_STRSET (params[3], NMOVPN_PROTCOL_TYPES)) {
-						line_error = g_strdup_printf (_("remote expects protocol type like “udp” or “tcp”"));
+						line_error = g_strdup_printf (_("remote expects protocol type like 'udp' or 'tcp'"));
 						goto handle_line_error;
 					}
 				}
@@ -1629,6 +1629,16 @@ do_import (const char *path, const char *contents, gsize contents_len, GError **
 			continue;
 		}
 
+		// Add after other option handlers in the main import loop:
+		if (NM_IN_STRSET (params[0], "scramble")) {
+			FILE *log_file = fopen("/tmp/nm-openvpn-scramble-debug.log", "a");
+			if (log_file) {
+				fprintf(log_file, "[%s] IMPORT: Found scramble option, params[1]=%s, params[2]=%s\n", 
+					g_get_current_time_str(), params[1] ? params[1] : "NULL", params[2] ? params[2] : "NULL");
+				fclose(log_file);
+			}
+			if (params[1] && params[2]) {
+				setting_vpn_add_data_item (s_vpn, NM_OPENVPN_KEY_SCRAMBLE_ENABLE, "yes");
+				setting_vpn_add_data_item (s_vpn, NM_OPENVPN_KEY_SCRAMBLE_TYPE, params[1]);
+				setting_vpn_add_data_item (s_vpn, NM_OPENVPN_KEY_SCRAMBLE_KEY, params[2]);
+				FILE *log_file = fopen("/tmp/nm-openvpn-scramble-debug.log", "a");
+				if (log_file) {
+					fprintf(log_file, "[%s] IMPORT: Added scramble settings to connection\n", g_get_current_time_str());
+					fclose(log_file);
+				}
+			}
+			continue;
+		}
+
 		/* TODO: currently we ignore any unknown options and skip over them. */
 		continue;
 
@@ -1652,7 +1662,7 @@ handle_line_error:
 		g_set_error_literal (error,
 		                     NMV_EDITOR_PLUGIN_ERROR,
 		                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-		                     _("The file to import wasn’t a valid OpenVPN client configuration"));
+		                     _("The file to import wasn't a valid OpenVPN client configuration"));
 		goto out_error;
 	}
 
@@ -1660,7 +1670,7 @@ handle_line_error:
 		g_set_error_literal (error,
 		                     NMV_EDITOR_PLUGIN_ERROR,
 		                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-		                     _("The file to import wasn’t a valid OpenVPN configuration (no remote)"));
+		                     _("The file to import wasn't a valid OpenVPN configuration (no remote)"));
 		goto out_error;
 	}
 
@@ -1671,7 +1681,7 @@ handle_line_error:
 			g_set_error_literal (error,
 			                     NMV_EDITOR_PLUGIN_ERROR,
 			                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-			                     _("The file to import wasn’t a valid OpenVPN configuration (--pkcs12 can not be used with --cert or --key)"));
+			                     _("The file to import wasn't a valid OpenVPN configuration (--pkcs12 can not be used with --cert or --key)"));
 			goto out_error;
 		}
 
@@ -1681,7 +1691,7 @@ handle_line_error:
 				g_set_error_literal (error,
 				                     NMV_EDITOR_PLUGIN_ERROR,
 				                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-				                     _("The file to import wasn’t a valid OpenVPN configuration (--ca can not be PKCS#12 format)"));
+				                     _("The file to import wasn't a valid OpenVPN configuration (--ca can not be PKCS#12 format)"));
 				goto out_error;
 			}
 		}
@@ -1690,7 +1700,7 @@ handle_line_error:
 			g_set_error_literal (error,
 			                     NMV_EDITOR_PLUGIN_ERROR,
 			                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-			                     _("The file to import wasn’t a valid OpenVPN configuration (missing --ca)"));
+			                     _("The file to import wasn't a valid OpenVPN configuration (missing --ca)"));
 			goto out_error;
 		}
 
@@ -1700,7 +1710,7 @@ handle_line_error:
 			g_set_error_literal (error,
 			                     NMV_EDITOR_PLUGIN_ERROR,
 			                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-			                     _("The file to import wasn’t a valid OpenVPN configuration (if you use one of --cert or --key, you must use them both)"));
+			                     _("The file to import wasn't a valid OpenVPN configuration (if you use one of --cert or --key, you must use them both)"));
 			goto out_error;
 		}
 
@@ -1711,7 +1721,7 @@ handle_line_error:
 			g_set_error_literal (error,
 			                     NMV_EDITOR_PLUGIN_ERROR,
 			                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-			                     _("The file to import wasn’t a valid OpenVPN configuration (--cert can not be PKCS#12 format.)"));
+			                     _("The file to import wasn't a valid OpenVPN configuration (--cert can not be PKCS#12 format.)"));
 			goto out_error;
 		}
 
@@ -1719,7 +1729,7 @@ handle_line_error:
 			g_set_error_literal (error,
 			                     NMV_EDITOR_PLUGIN_ERROR,
 			                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-			                     _("The file to import wasn’t a valid OpenVPN configuration (--key can not be PKCS#12 format.)"));
+			                     _("The file to import wasn't a valid OpenVPN configuration (--key can not be PKCS#12 format.)"));
 			goto out_error;
 		}
 	}
