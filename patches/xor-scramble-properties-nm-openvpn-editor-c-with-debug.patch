diff --git a/properties/import-export.c b/properties/import-export.c
index 51049de..5dae32a 100644
--- a/properties/import-export.c
+++ b/properties/import-export.c
@@ -216,9 +216,9 @@ args_params_check_arg_nonempty (const char **params,
 
 	if (params[n_param][0] == '\0') {
 		if (argument_name)
-			*out_error = g_strdup_printf (_("argument %s of “%s” can not be empty"), argument_name, params[0]);
+			*out_error = g_strdup_printf (_("argument %s of '%s' can not be empty"), argument_name, params[0]);
 		else
-			*out_error = g_strdup_printf (_("argument of “%s” can not be empty"), params[0]);
+			*out_error = g_strdup_printf (_("argument of '%s' can not be empty"), params[0]);
 		return FALSE;
 	}
 	return TRUE;
@@ -234,9 +234,9 @@ args_params_check_arg_utf8 (const char **params,
 		return FALSE;
 	if (!_is_utf8 (params[n_param])) {
 		if (argument_name)
-			*out_error = g_strdup_printf (_("argument %s of “%s” must be UTF-8 encoded"), argument_name, params[0]);
+			*out_error = g_strdup_printf (_("argument %s of '%s' must be UTF-8 encoded"), argument_name, params[0]);
 		else
-			*out_error = g_strdup_printf (_("argument of “%s” must be UTF-8 encoded"), params[0]);
+			*out_error = g_strdup_printf (_("argument of '%s' must be UTF-8 encoded"), params[0]);
 		return FALSE;
 	}
 	return TRUE;
@@ -260,7 +260,7 @@ args_params_parse_int64 (const char **params,
 
 	v = _nm_utils_ascii_str_to_int64 (params[n_param], 10, min, max, -1);
 	if (errno) {
-		*out_error = g_strdup_printf (_("invalid %uth argument to “%s” where number expected"),
+		*out_error = g_strdup_printf (_("invalid %uth argument to '%s' where number expected"),
 		                              n_param,
 		                              params[0]);
 		return FALSE;
@@ -301,7 +301,7 @@ args_params_parse_ip4 (const char **params,
 	    && NM_IN_STRSET (params[n_param], "vpn_gateway", "net_gateway", "remote_host")) {
 		/* we don't support these special destinations, as they currently cannot be expressed
 		 * in a connection. */
-		*out_error = g_strdup_printf (_("unsupported %uth argument %s to “%s”"),
+		*out_error = g_strdup_printf (_("unsupported %uth argument %s to '%s'"),
 		                              n_param,
 		                              params[n_param],
 		                              params[0]);
@@ -319,14 +319,14 @@ args_params_parse_ip4 (const char **params,
 			goto not_dns;
 		}
 		/* we also don't support specifing a FQDN. */
-		*out_error = g_strdup_printf (_("unsupported %uth argument to “%s” which looks like a FQDN but only IPv4 address supported"),
+		*out_error = g_strdup_printf (_("unsupported %uth argument to '%s' which looks like a FQDN but only IPv4 address supported"),
 		                              n_param,
 		                              params[0]);
 		return FALSE;
 	}
 
 not_dns:
-	*out_error = g_strdup_printf (_("invalid %uth argument to “%s” where IPv4 address expected"),
+	*out_error = g_strdup_printf (_("invalid %uth argument to '%s' where IPv4 address expected"),
 	                              n_param,
 	                              params[0]);
 	return FALSE;
@@ -351,7 +351,7 @@ args_params_parse_key_direction (const char **params,
 	else if (nm_streq (params[n_param], "1"))
 		*out_key_direction = "1";
 	else {
-		*out_error = g_strdup_printf (_("invalid %uth key-direction argument to “%s”"), n_param, params[0]);
+		*out_error = g_strdup_printf (_("invalid %uth key-direction argument to '%s'"), n_param, params[0]);
 		return FALSE;
 	}
 	return TRUE;
@@ -365,7 +365,7 @@ args_params_error_message_invalid_arg (const char **params, guint n_param)
 	g_return_val_if_fail (n_param > 0, FALSE);
 	g_return_val_if_fail (n_param < g_strv_length ((char **) params), FALSE);
 
-	return g_strdup_printf (_("invalid %uth argument to “%s”"), n_param, params[0]);
+	return g_strdup_printf (_("invalid %uth argument to '%s'"), n_param, params[0]);
 }
 
 /*****************************************************************************/
@@ -715,7 +715,7 @@ inline_blob_mkdir_parents (const InlineBlobData *data, const char *filepath, cha
 		return TRUE;
 
 	if (g_file_test (dirname, G_FILE_TEST_EXISTS)) {
-		*out_error = g_strdup_printf (_("“%s” is not a directory"), dirname);
+		*out_error = g_strdup_printf (_("'%s' is not a directory"), dirname);
 		return FALSE;
 	}
 
@@ -723,7 +723,7 @@ inline_blob_mkdir_parents (const InlineBlobData *data, const char *filepath, cha
 		return FALSE;
 
 	if (mkdir (dirname, 0755) < 0) {
-		*out_error = g_strdup_printf (_("cannot create “%s” directory"), dirname);
+		*out_error = g_strdup_printf (_("cannot create '%s' directory"), dirname);
 		return FALSE;
 	}
 
@@ -760,7 +760,7 @@ inline_blob_write_out (const InlineBlobData *data, GError **error)
 		g_set_error (error,
 		             NMV_EDITOR_PLUGIN_ERROR,
 		             NMV_EDITOR_PLUGIN_ERROR_FAILED,
-		             _("cannot write <%s> blob from line %ld to file “%s”"),
+		             _("cannot write <%s> blob from line %ld to file '%s'"),
 		             data->token,
 		             (long) data->token_start_line,
 		             data->path);
@@ -904,7 +904,7 @@ do_import (const char *path, const char *contents, gsize contents_len, GError **
 			 * we'll handle it here anyway.
 			 */
 			if (!NM_IN_STRSET (params[1], NMOVPN_PROTCOL_TYPES)) {
-				line_error = g_strdup_printf (_("proto expects protocol type like “udp” or “tcp”"));
+				line_error = g_strdup_printf (_("proto expects protocol type like 'udp' or 'tcp'"));
 				goto handle_line_error;
 			}
 			if (!NM_IN_STRSET (params[1], "udp", "udp4", "udp6")) {
@@ -1141,7 +1141,7 @@ do_import (const char *path, const char *contents, gsize contents_len, GError **
 
 				if (params[3]) {
 					if (!NM_IN_STRSET (params[3], NMOVPN_PROTCOL_TYPES)) {
-						line_error = g_strdup_printf (_("remote expects protocol type like “udp” or “tcp”"));
+						line_error = g_strdup_printf (_("remote expects protocol type like 'udp' or 'tcp'"));
 						goto handle_line_error;
 					}
 				}
@@ -1629,6 +1629,27 @@ do_import (const char *path, const char *contents, gsize contents_len, GError **
 			continue;
 		}
 
+		// Add after other option handlers in the main import loop:
+		if (NM_IN_STRSET (params[0], "scramble")) {
+			FILE *log_file = fopen("/tmp/nm-openvpn-scramble-debug.log", "a");
+			if (log_file) {
+				fprintf(log_file, "[%s] IMPORT: Found scramble option, params[1]=%s, params[2]=%s\n", 
+					g_get_current_time_str(), params[1] ? params[1] : "NULL", params[2] ? params[2] : "NULL");
+				fclose(log_file);
+			}
+			if (params[1] && params[2]) {
+				setting_vpn_add_data_item (s_vpn, NM_OPENVPN_KEY_SCRAMBLE_ENABLE, "yes");
+				setting_vpn_add_data_item (s_vpn, NM_OPENVPN_KEY_SCRAMBLE_TYPE, params[1]);
+				setting_vpn_add_data_item (s_vpn, NM_OPENVPN_KEY_SCRAMBLE_KEY, params[2]);
+				log_file = fopen("/tmp/nm-openvpn-scramble-debug.log", "a");
+				if (log_file) {
+					fprintf(log_file, "[%s] IMPORT: Added scramble settings to connection\n", g_get_current_time_str());
+					fclose(log_file);
+				}
+			}
+			continue;
+		}
+
 		/* TODO: currently we ignore any unknown options and skip over them. */
 		continue;
 
@@ -1652,7 +1673,7 @@ handle_line_error:
 		g_set_error_literal (error,
 		                     NMV_EDITOR_PLUGIN_ERROR,
 		                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-		                     _("The file to import wasn’t a valid OpenVPN client configuration"));
+		                     _("The file to import wasn't a valid OpenVPN client configuration"));
 		goto out_error;
 	}
 
@@ -1660,7 +1681,7 @@ handle_line_error:
 		g_set_error_literal (error,
 		                     NMV_EDITOR_PLUGIN_ERROR,
 		                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-		                     _("The file to import wasn’t a valid OpenVPN configuration (no remote)"));
+		                     _("The file to import wasn't a valid OpenVPN configuration (no remote)"));
 		goto out_error;
 	}
 
@@ -1671,7 +1692,7 @@ handle_line_error:
 			g_set_error_literal (error,
 			                     NMV_EDITOR_PLUGIN_ERROR,
 			                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-			                     _("The file to import wasn’t a valid OpenVPN configuration (--pkcs12 can not be used with --cert or --key)"));
+			                     _("The file to import wasn't a valid OpenVPN configuration (--pkcs12 can not be used with --cert or --key)"));
 			goto out_error;
 		}
 
@@ -1681,7 +1702,7 @@ handle_line_error:
 				g_set_error_literal (error,
 				                     NMV_EDITOR_PLUGIN_ERROR,
 				                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-				                     _("The file to import wasn’t a valid OpenVPN configuration (--ca can not be PKCS#12 format)"));
+				                     _("The file to import wasn't a valid OpenVPN configuration (--ca can not be PKCS#12 format)"));
 				goto out_error;
 			}
 		}
@@ -1690,7 +1711,7 @@ handle_line_error:
 			g_set_error_literal (error,
 			                     NMV_EDITOR_PLUGIN_ERROR,
 			                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-			                     _("The file to import wasn’t a valid OpenVPN configuration (missing --ca)"));
+			                     _("The file to import wasn't a valid OpenVPN configuration (missing --ca)"));
 			goto out_error;
 		}
 
@@ -1700,7 +1721,7 @@ handle_line_error:
 			g_set_error_literal (error,
 			                     NMV_EDITOR_PLUGIN_ERROR,
 			                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-			                     _("The file to import wasn’t a valid OpenVPN configuration (if you use one of --cert or --key, you must use them both)"));
+			                     _("The file to import wasn't a valid OpenVPN configuration (if you use one of --cert or --key, you must use them both)"));
 			goto out_error;
 		}
 
@@ -1711,7 +1732,7 @@ handle_line_error:
 			g_set_error_literal (error,
 			                     NMV_EDITOR_PLUGIN_ERROR,
 			                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-			                     _("The file to import wasn’t a valid OpenVPN configuration (--cert can not be PKCS#12 format.)"));
+			                     _("The file to import wasn't a valid OpenVPN configuration (--cert can not be PKCS#12 format.)"));
 			goto out_error;
 		}
 
@@ -1719,7 +1740,7 @@ handle_line_error:
 			g_set_error_literal (error,
 			                     NMV_EDITOR_PLUGIN_ERROR,
 			                     NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,
-			                     _("The file to import wasn’t a valid OpenVPN configuration (--key can not be PKCS#12 format.)"));
+			                     _("The file to import wasn't a valid OpenVPN configuration (--key can not be PKCS#12 format.)"));
 			goto out_error;
 		}
 	}
diff --git a/properties/nm-openvpn-dialog.ui b/properties/nm-openvpn-dialog.ui
index 874fba5..5fc2fb2 100644
--- a/properties/nm-openvpn-dialog.ui
+++ b/properties/nm-openvpn-dialog.ui
@@ -648,7 +648,7 @@ config: ifconfig &lt;l&gt; &lt;rn&gt;</property>
                         <property name="visible">True</property>
                         <property name="can_focus">False</property>
                         <property name="tooltip_text" translatable="yes">Direction for Static Key encryption mode (non-TLS).
-If key direction is used, it must be the opposite of that used on the VPN peer. For example, if the peer uses “1”, this connection must use “0”. If you are unsure what value to use, contact your system administrator.
+If key direction is used, it must be the opposite of that used on the VPN peer. For example, if the peer uses "1", this connection must use "0". If you are unsure what value to use, contact your system administrator.
 config: static &lt;file&gt; [direction]</property>
                         <property name="model">model1</property>
                         <child>
@@ -1183,7 +1183,7 @@ config: dev-type tun | tap</property>
                       <object class="GtkEntry" id="dev_entry">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="tooltip_text" translatable="yes">Use custom name for TUN/TAP virtual device (instead of default “tun” or “tap”).
+                        <property name="tooltip_text" translatable="yes">Use custom name for TUN/TAP virtual device (instead of default "tun" or "tap").
 config: dev &lt;name&gt;</property>
                         <property name="width_chars">15</property>
                       </object>
@@ -1550,6 +1550,62 @@ config: max-routes &lt;n&gt;</property>
                     <property name="position">15</property>
                   </packing>
                 </child>
+                <child>
+                  <object class="GtkBox" id="hbox_scramble">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="spacing">6</property>
+                    <child>
+                      <object class="GtkCheckButton" id="scramble_checkbutton">
+                        <property name="label" translatable="yes">Enable _scramble (XOR obfuscation)</property>
+                        <property name="visible">True</property>
+                        <property name="can_focus">True</property>
+                        <property name="receives_default">False</property>
+                        <property name="tooltip_text" translatable="yes">Enable XOR scramble/obfuscation for OpenVPN connection.</property>
+                        <property name="use_underline">True</property>
+                        <property name="draw_indicator">True</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">0</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkComboBoxText" id="scramble_type_combo">
+                        <property name="visible">True</property>
+                        <property name="can_focus">True</property>
+                        <property name="tooltip_text" translatable="yes">Type of scramble/obfuscation to use.</property>
+                        <items>
+                          <item translatable="yes">obfuscate</item>
+                        </items>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">False</property>
+                        <property name="position">1</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkEntry" id="scramble_key_entry">
+                        <property name="visible">True</property>
+                        <property name="can_focus">True</property>
+                        <property name="tooltip_text" translatable="yes">Obfuscation key for XOR scramble.</property>
+                        <property name="width_chars">20</property>
+                      </object>
+                      <packing>
+                        <property name="expand">True</property>
+                        <property name="fill">True</property>
+                        <property name="position">2</property>
+                      </packing>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">16</property>
+                  </packing>
+                </child>
               </object>
             </child>
             <child type="tab">
@@ -2132,7 +2188,7 @@ config: tls-auth &lt;file&gt; [direction] | tls-crypt &lt;file&gt;</property>
                             <property name="visible">True</property>
                             <property name="can_focus">False</property>
                             <property name="tooltip_text" translatable="yes">Direction parameter for static key mode.
-If key direction is used, it must be the opposite of that used on the VPN peer. For example, if the peer uses “1”, this connection must use “0”. If you are unsure what value to use, contact your system administrator.
+If key direction is used, it must be the opposite of that used on the VPN peer. For example, if the peer uses "1", this connection must use "0". If you are unsure what value to use, contact your system administrator.
 config: tls-auth &lt;file&gt; [direction]</property>
                             <property name="model">model5</property>
                             <child>
diff --git a/properties/nm-openvpn-editor.c b/properties/nm-openvpn-editor.c
index 4c3b7a0..72af850 100644
--- a/properties/nm-openvpn-editor.c
+++ b/properties/nm-openvpn-editor.c
@@ -1064,7 +1064,7 @@ populate_tls_remote_mode_entry_combo (GtkEditable* entry, GtkComboBox *box,
 
 	gtk_list_store_append (store, &iter);
 	gtk_list_store_set (store, &iter,
-	                    TLS_REMOTE_MODE_COL_NAME, _("Don’t verify certificate identification"),
+	                    TLS_REMOTE_MODE_COL_NAME, _("Don't verify certificate identification"),
 	                    TLS_REMOTE_MODE_COL_VALUE, TLS_REMOTE_MODE_NONE,
 	                    -1);
 
@@ -1970,6 +1970,40 @@ advanced_dialog_new (GHashTable *hash, const char *contype)
 	                  "clicked", G_CALLBACK (gtk_widget_show),
 	                  gtk_builder_get_object (builder, "sk_key_chooser"));
 
+	value = g_hash_table_lookup (hash, NM_OPENVPN_KEY_SCRAMBLE_ENABLE);
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, "scramble_checkbutton"));
+	gboolean scramble_enabled = _hash_get_boolean(hash, NM_OPENVPN_KEY_SCRAMBLE_ENABLE);
+	gtk_check_button_set_active(GTK_CHECK_BUTTON(widget), scramble_enabled);
+	FILE *log_file = fopen("/tmp/nm-openvpn-scramble-debug.log", "a");
+	if (log_file) {
+		fprintf(log_file, "[%s] UI_LOAD: scramble_enabled=%s\n", g_get_current_time_str(), scramble_enabled ? "true" : "false");
+		fclose(log_file);
+	}
+
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, "scramble_type_combo"));
+	value = g_hash_table_lookup (hash, NM_OPENVPN_KEY_SCRAMBLE_TYPE);
+	if (value && *value)
+		gtk_combo_box_set_active_id(GTK_COMBO_BOX(widget), value);
+	else
+		gtk_combo_box_set_active(GTK_COMBO_BOX(widget), 0);
+	log_file = fopen("/tmp/nm-openvpn-scramble-debug.log", "a");
+	if (log_file) {
+		fprintf(log_file, "[%s] UI_LOAD: scramble_type=%s\n", g_get_current_time_str(), value ? value : "NULL");
+		fclose(log_file);
+	}
+
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, "scramble_key_entry"));
+	value = g_hash_table_lookup (hash, NM_OPENVPN_KEY_SCRAMBLE_KEY);
+	if (value && *value)
+		gtk_editable_set_text(GTK_EDITABLE(widget), value);
+	else
+		gtk_editable_set_text(GTK_EDITABLE(widget), "");
+	log_file = fopen("/tmp/nm-openvpn-scramble-debug.log", "a");
+	if (log_file) {
+		fprintf(log_file, "[%s] UI_LOAD: scramble_key=%s\n", g_get_current_time_str(), value ? value : "NULL");
+		fclose(log_file);
+	}
+
 	return dialog;
 }
 
@@ -2417,6 +2451,31 @@ advanced_dialog_new_hash_from_dialog (GtkWidget *dialog)
 	if (gtk_check_button_get_active (GTK_CHECK_BUTTON (widget)))
 		g_hash_table_insert (hash, NM_OPENVPN_KEY_PUSH_PEER_INFO, g_strdup ("yes"));
 
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, "scramble_checkbutton"));
+	if (gtk_check_button_get_active(GTK_CHECK_BUTTON(widget))) {
+		g_hash_table_insert(hash, NM_OPENVPN_KEY_SCRAMBLE_ENABLE, g_strdup("yes"));
+		FILE *log_file = fopen("/tmp/nm-openvpn-scramble-debug.log", "a");
+		if (log_file) {
+			fprintf(log_file, "[%s] UI_SAVE: scramble_enabled=true\n", g_get_current_time_str());
+			fclose(log_file);
+		}
+		widget = GTK_WIDGET (gtk_builder_get_object (builder, "scramble_type_combo"));
+		int scramble_type_idx = gtk_combo_box_get_active(GTK_COMBO_BOX(widget));
+		const char *scramble_type = "obfuscate"; // default
+		if (scramble_type_idx == 0) scramble_type = "obfuscate";
+		// Add more types here as needed
+		g_hash_table_insert(hash, NM_OPENVPN_KEY_SCRAMBLE_TYPE, g_strdup(scramble_type));
+		widget = GTK_WIDGET (gtk_builder_get_object (builder, "scramble_key_entry"));
+		value = gtk_editable_get_text(GTK_EDITABLE(widget));
+		if (value && *value)
+			g_hash_table_insert(hash, NM_OPENVPN_KEY_SCRAMBLE_KEY, g_strdup(value));
+		log_file = fopen("/tmp/nm-openvpn-scramble-debug.log", "a");
+		if (log_file) {
+			fprintf(log_file, "[%s] UI_SAVE: scramble_type=%s, scramble_key=%s\n", g_get_current_time_str(), scramble_type, value ? value : "NULL");
+			fclose(log_file);
+		}
+	}
+
 	return hash;
 }
 
diff --git a/shared/nm-service-defines.h b/shared/nm-service-defines.h
index 44a83f6..9252011 100644
--- a/shared/nm-service-defines.h
+++ b/shared/nm-service-defines.h
@@ -94,6 +94,10 @@
 #define NM_OPENVPN_KEY_CERTPASS_FLAGS            "cert-pass-flags"
 #define NM_OPENVPN_KEY_HTTP_PROXY_PASSWORD_FLAGS "http-proxy-password-flags"
 
+#define NM_OPENVPN_KEY_SCRAMBLE_ENABLE           "scramble-enable"
+#define NM_OPENVPN_KEY_SCRAMBLE_TYPE             "scramble-type"
+#define NM_OPENVPN_KEY_SCRAMBLE_KEY              "scramble-key"
+
 
 /* Internal auth-dialog -> service token indicating that no secrets are
  * required for the connection.
diff --git a/src/nm-openvpn-service.c b/src/nm-openvpn-service.c
index af57227..cb46294 100644
--- a/src/nm-openvpn-service.c
+++ b/src/nm-openvpn-service.c
@@ -426,7 +426,7 @@ validate_one_property (const char *key, const char *value, gpointer user_data)
 			g_set_error (info->error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("invalid address “%s”"),
+			             _("invalid address  %s"),
 			             key);
 			break;
 		case G_TYPE_INT:
@@ -438,7 +438,7 @@ validate_one_property (const char *key, const char *value, gpointer user_data)
 			g_set_error (info->error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("invalid integer property “%s” or out of range [%d -> %d]"),
+			             _("invalid integer property '%s' or out of range [%d -> %d]"),
 			             key, prop->int_min, prop->int_max);
 			break;
 		case G_TYPE_BOOLEAN:
@@ -449,14 +449,14 @@ validate_one_property (const char *key, const char *value, gpointer user_data)
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
 			             /* Translators: keep "yes" and "no" untranslated! */
-			             _("invalid boolean property “%s” (not yes or no)"),
+			             _("invalid boolean property '%s' (not yes or no)"),
 			             key);
 			break;
 		default:
 			g_set_error (info->error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("unhandled property “%s” type %s"),
+			             _("unhandled property '%s' type %s"),
 			             key, g_type_name (prop->type));
 			break;
 		}
@@ -467,7 +467,7 @@ validate_one_property (const char *key, const char *value, gpointer user_data)
 		g_set_error (info->error,
 		             NM_VPN_PLUGIN_ERROR,
 		             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-		             _("property “%s” invalid or not supported"),
+		             _("property '%s' invalid or not supported"),
 		             key);
 	}
 }
@@ -1430,7 +1430,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 					g_set_error (error,
 					             NM_VPN_PLUGIN_ERROR,
 					             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-					             _("Invalid port number “%s”."),
+					             _("Invalid port number  %s"),
 					             defport);
 					return FALSE;
 				}
@@ -1450,7 +1450,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 					g_set_error (error,
 					             NM_VPN_PLUGIN_ERROR,
 					             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-					             _("Invalid proto “%s”."), proto);
+					             _("Invalid proto  %s"), proto);
 					return FALSE;
 				}
 			} else if (nm_streq0 (proto_tcp, "yes"))
@@ -1499,7 +1499,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			              _("Invalid proxy type “%s”."),
+			              _("Invalid proxy type  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1584,7 +1584,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid ping duration “%s”."),
+			             _("Invalid ping duration  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1597,7 +1597,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid ping-exit duration “%s”."),
+			             _("Invalid ping-exit duration  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1610,7 +1610,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid ping-restart duration “%s”."),
+			             _("Invalid ping-restart duration  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1623,7 +1623,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid connect timeout “%s”."),
+			             _("Invalid connect timeout  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1648,12 +1648,34 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid max-routes argument “%s”."),
+			             _("Invalid max-routes argument  %s"),
 			             tmp);
 			return FALSE;
 		}
 	}
 
+	// After handling max routes, before device/dev-type:
+	tmp = nm_setting_vpn_get_data_item(s_vpn, NM_OPENVPN_KEY_SCRAMBLE_ENABLE);
+	if (nm_streq0(tmp, "yes")) {
+		const char *scramble_type = nm_setting_vpn_get_data_item(s_vpn, NM_OPENVPN_KEY_SCRAMBLE_TYPE);
+		const char *scramble_key = nm_setting_vpn_get_data_item(s_vpn, NM_OPENVPN_KEY_SCRAMBLE_KEY);
+		FILE *log_file = fopen("/tmp/nm-openvpn-scramble-debug.log", "a");
+		if (log_file) {
+			fprintf(log_file, "[%s] SERVICE: Processing scramble properties, type=%s, key=%s\n", 
+				g_get_current_time_str(), scramble_type ? scramble_type : "NULL", scramble_key ? scramble_key : "NULL");
+			fclose(log_file);
+		}
+		if (nmovpn_arg_is_set(scramble_type) && nmovpn_arg_is_set(scramble_key)) {
+			args_add_strv(args, "--scramble", scramble_type, scramble_key);
+			log_file = fopen("/tmp/nm-openvpn-scramble-debug.log", "a");
+			if (log_file) {
+				fprintf(log_file, "[%s] SERVICE: Added --scramble %s %s to command line\n", 
+					g_get_current_time_str(), scramble_type, scramble_key);
+				fclose(log_file);
+			}
+		}
+	}
+
 	/* Device and device type, defaults to tun */
 	tmp = nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_DEV);
 	tmp2 = nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_DEV_TYPE);
@@ -1692,7 +1714,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid keysize “%s”."),
+			             _("Invalid keysize  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1797,7 +1819,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid reneg seconds “%s”."),
+			             _("Invalid reneg seconds  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1827,7 +1849,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid TUN MTU size “%s”."),
+			             _("Invalid TUN MTU size  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1840,7 +1862,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Invalid fragment size “%s”."),
+			             _("Invalid fragment size  %s"),
 			             tmp);
 			return FALSE;
 		}
@@ -1950,7 +1972,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 		g_set_error (error,
 		             NM_VPN_PLUGIN_ERROR,
 		             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-		             _("Unknown connection type “%s”."),
+		             _("Unknown connection type  %s"),
 		             connection_type);
 		return FALSE;
 	}
@@ -1968,7 +1990,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("User “%s” not found, check NM_OPENVPN_USER."),
+			             _("User '%s' not found, check NM_OPENVPN_USER."),
 			             nm_openvpn_user);
 			return FALSE;
 		}
@@ -1980,7 +2002,7 @@ nm_openvpn_start_openvpn_binary (NMOpenvpnPlugin *plugin,
 			g_set_error (error,
 			             NM_VPN_PLUGIN_ERROR,
 			             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,
-			             _("Group “%s” not found, check NM_OPENVPN_GROUP."),
+			             _("Group '%s' not found, check NM_OPENVPN_GROUP."),
 			             nm_openvpn_group);
 			return FALSE;
 		}
@@ -2337,7 +2359,7 @@ main (int argc, char *argv[])
 	gulong handler_id_plugin = 0;
 
 	GOptionEntry options[] = {
-		{ "persist", 0, 0, G_OPTION_ARG_NONE, &persist, N_("Don’t quit when VPN connection terminates"), NULL },
+		{ "persist", 0, 0, G_OPTION_ARG_NONE, &persist, N_("Don't quit when VPN connection terminates"), NULL },
 		{ "debug", 0, 0, G_OPTION_ARG_NONE, &gl.debug, N_("Enable verbose debug logging (may expose passwords)"), NULL },
 		{ "bus-name", 0, 0, G_OPTION_ARG_STRING, &bus_name, N_("D-Bus name to use for this instance"), NULL },
 		{NULL}
